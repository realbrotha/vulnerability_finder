//
// Created by realbro on 10/5/20.
//

#include "ActionHandler.h"
#include "action/ExistFile.h"
#include "action/FindStringFromFile.h"
#include "action/CheckPerm.h"

ActionHandler::ActionHandler() {
  action_list_.emplace("is_exist_file", std::make_shared<ExistFile>());
  action_list_.emplace("find_string_from_file", std::make_shared<FindStringFromFile>());
  action_list_.emplace("check_perm_file", std::make_shared<CheckPerm>());
}
ActionHandler::~ActionHandler() {

}
std::vector<std::string> ActionHandler::GetActionList() {

}
int ActionHandler::Scan(std::vector<std::string>& action_list) {

  std::shared_ptr<ActionFactoryBase> action;
  AfterWork cond;
  std::string param;

  std::vector<std::pair<AfterWork, bool>> action_result_list;

  for (auto &line : action_list) {
    bool not_flag = false;
    if (VerifyAction(line, param, action, cond, not_flag)) {
      if (action.get() != nullptr) {
        bool result = action->Scan(param, cond);
        action_result_list.emplace_back(std::make_pair(cond, (not_flag) ? !result : result));
      }
    } else {
      // TODO : 방어코드
    }
  }

  bool result = action_result_list[0].second;
  for (int i = 1; i < action_result_list.size() ; ++i) {
    if (action_result_list[i].first == AfterWork::AND) {
      result &= (action_result_list[i].second);
    } else if (action_result_list[i].first == AfterWork::OR) {
      result |= (action_result_list[i].second);
    }
  }

  return result;
}

bool ActionHandler::VerifyAction(std::string line_string, std::string &param /* out */, std::shared_ptr<ActionFactoryBase>& action /*out */, AfterWork &condition  /*out */, bool& flag_not) {
  bool result = false;
  int start_pos = 0;
  flag_not = false;
  if ("not" == line_string.substr(0, 3)) {
    start_pos =4;
    flag_not = true;
  }
  std::shared_ptr<ActionFactoryBase> buffer;
  int pos = line_string.find('=');
  if (pos != std::string::npos) {
    std::string buffer;
    buffer = line_string.substr(pos -3, 3);
    int pre_defined_string =0;
    if (buffer =="and") {
      condition = AfterWork::AND;
      pre_defined_string = 4;
    } else {
      condition = AfterWork::OR;
      pre_defined_string = 3;
    }
    std::string keyword = line_string.substr(start_pos, pos - pre_defined_string -start_pos);
    param = line_string.substr(pos + 1, line_string.length() - (pos + 1) );
//    printf("keyword : %s, args : %s", keyword.c_str(), param.c_str());
    if (action_list_.count(keyword.c_str())) {
      action = action_list_[keyword];
      result = true;
    }
  }

  return result;
}