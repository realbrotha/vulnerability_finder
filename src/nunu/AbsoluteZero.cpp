//
// Created by realbro on 10/5/20.
//

#include "AbsoluteZero.h"

#include <iostream>
#include <fstream>
#include <vector>
AbsoluteZero::AbsoluteZero() : rule_verified(false){
  // do something
}
AbsoluteZero::~AbsoluteZero() {
  // TODO : graceful Thread clear
}

bool AbsoluteZero::Initialize(std::string file_path, bool use_async) {
  bool result = false;

  (use_async);// TODO : Not Yet Ready.

  if (!file_path.empty()) {
    // TODO : rule 파일에 관한 검증. 길이, 존재 여부, 무결성, 내용 증명 등등등
    rule_file_path_ = file_path;
    rule_verified = true;
    result = true;
  }
  return result;
}

bool AbsoluteZero::SetCallback(ResponseCallback pre_scan, ResponseCallback success_scan, ResponseCallback failed_scan) {
  if (pre_scan) {
    pre_scan_ = std::move(pre_scan);
  }
  if (success_scan) {
    success_scan_ = std::move(success_scan);
  }
  if (failed_scan) {
    failed_scan_ = std::move(failed_scan);
  }
}

bool AbsoluteZero::Finalize() {

}

bool AbsoluteZero::Start() {
  int result = false;

  if (!rule_verified) return result;

  // read rule file
  std::ifstream openFile(rule_file_path_.c_str());
  if (openFile.is_open()) {
    auto FindTango = [](std::string tango, std::string read, std::string &out) mutable -> bool {
      bool result = false;
      if ( read.length() > (tango.length() +1) &&read.find(tango.c_str(), 0, tango.length()) != std::string::npos ) {
        out = read.substr(tango.length() +1, read.length() - (tango.length() +1));
        result = true;
      }
      return result;
    };

    std::string line;
    struct RULES last_rule_info;
    while (getline(openFile, line)) {
      if (line.length() <= 3) continue;
      if (line[0] == ';' || line[0] == '#' || line[0]  == ' ') continue;
      std::string count;
      if (FindTango("tags", line, last_rule_info.tags )) {
        //std::cout << "find tags  : (" <<  last_rule_info.tags << ")" << std::endl;
      } else if (FindTango("desc", line, last_rule_info.descrption )) {
        //std::cout << "find desc  : (" <<  last_rule_info.descrption << ")" << std::endl;
      } else if (FindTango("succmsg", line, last_rule_info.success_message )) {
        //std::cout << "find tags  : (" <<  last_rule_info.success_message << ")" << std::endl;
      } else if (FindTango("failmsg", line, last_rule_info.failed_message )) {
        //std::cout << "find tags  : (" <<  last_rule_info.failed_message << ")" << std::endl;
      } else if (FindTango("count", line, count )) {
        //std::cout << "find count  : (" <<  count << ")" << std::endl;
        int buffer = std::stoi(count);
        std::vector<std::string> rule_list;
        for (int i = 0; i < buffer ; ++i) {
          if (getline(openFile, line)) {
            rule_list.push_back(line);
          }
        }
        if (pre_scan_) {
          pre_scan_(last_rule_info);
        }
        result = action_handler_.Scan(rule_list);
        (!result) ? success_scan_(last_rule_info) : failed_scan_(last_rule_info);

      }
    }
    openFile.close();
  }
  return result;
}